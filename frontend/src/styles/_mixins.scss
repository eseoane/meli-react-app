// Generates the image in either standard size or retina display version
@mixin imgRetina($image, $width, $height) {
  @media
  screen and (-webkit-min-device-pixel-ratio: 2),
  screen and (   min--moz-device-pixel-ratio: 2),
  screen and (   -moz-min-device-pixel-ratio: 2),
  screen and (     -o-min-device-pixel-ratio: 2/1),
  screen and (        min-device-pixel-ratio: 2),
  screen and (             min-resolution: 192dpi),
  screen and (             min-resolution: 2dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}


// Vertical alignment
@mixin vertical-center {
  position: relative;
  top: 50%;
  -ms-transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  transform: translateY(-50%);
}


// To quickly centre a block element without having to worry about if there is any top or bottom margin already applied.
@mixin push-auto {
  margin: {
    left: auto;
    right: auto;
  }
}


// When using ::before and ::after you'll always need these three, so we're saving two lines of code every time you use this.
@mixin pseudo($display: block, $pos: absolute, $content: ''){
  content: $content;
  display: $display;
  position: $pos;
}


// We use this for creating scalable elements (usually images / background images) that maintain a ratio.
@mixin responsive-ratio($x,$y, $pseudo: false) {
  $padding: unquote( ( $y / $x ) * 100 + '%' );
  @if $pseudo {
    &:before {
      @include pseudo($pos: relative);
      width: 100%;
      padding-top: $padding;
    }
  } @else {
    padding-top: $padding;
  }
}


// Placeholders
@mixin input-placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}


// Truncate
@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}


// Media queries
$breakpoints: (
  "phone":        400px,
  "phone-wide":   480px,
  "phablet":      560px,
  "tablet-small": 640px,
  "tablet":       768px,
  "tablet-wide":  1024px,
  "desktop":      1248px,
  "desktop-wide": 1440px
);

@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}
